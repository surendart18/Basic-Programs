

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 
Example 1:

Input: nums = [2,2,1]
Output: 1

Example 2:

Input: nums = [4,1,2,1,2]
Output: 4

Example 3:

Input: nums = [1]
Output: 1

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.



Method 1: 

TC:O(n)
SC:O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int result=0;
        for(int num:nums)
        {
            result^=num;
        }
        return result;    
    }
};



Method 2:

TC:O(n*n)
SC:O(1)


class Solution {
public:
    int singleNumber(vector<int>& nums) {
        for(int i=0;i<nums.size();i++)
        {
            int count=0;
            for(int j=0;j<nums.size();j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
            }
            if(count==1)
            {
                return nums[i];
            } 
        }
        return -1;
    }
}; 
